from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import sqlite3
import pandas as pd

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_data = {}
ADMIN_PASSWORD = "admin1212"  # –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
authorized_users = set()  # –ù–∞–±–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ü–æ–ª—É—á–∞–µ–º –∫–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É –∏ –∞–≤—Ç–æ—Ä—É
def get_books(genre=None, author=None):
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    query = "SELECT title, author, genre, rating FROM books"
    params = ()
    if genre and author:
        query += " WHERE genre=? AND author=?"
        params = (genre, author)
    cursor.execute(query, params)
    books = cursor.fetchall()
    conn.close()
    return books

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –ë–î
def add_book_to_db(title, author, genre, rating):
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO books (title, author, genre, rating) VALUES (?, ?, ?, ?)", (title, author, genre, rating))
    conn.commit()
    conn.close()

# –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥—É –∏–∑ –ë–î
def delete_book_by_title(title):
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM books WHERE title=?", (title,))
    conn.commit()
    conn.close()

def get_unique_genres():
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT genre FROM books")
    genres = cursor.fetchall()
    conn.close()
    return [genre[0] for genre in genres]

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É
def get_authors_by_genre(genre):
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT author FROM books WHERE genre=?", (genre,))
    authors = cursor.fetchall()
    conn.close()
    return [author[0] for author in authors]

# –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–µ–¥—É –∏ –∑–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data[update.message.chat.id] = {}
    genres = get_unique_genres()
    await update.message.reply_text("–ö–∞–∫–æ–≥–æ –∂–∞–Ω—Ä–∞ –∫–Ω–∏–≥–∞ –≤–∞–º –Ω—É–∂–Ω–∞?", reply_markup=genre_keyboard(genres))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∂–∞–Ω—Ä–æ–≤
def genre_keyboard(genres, columns=3):
    keyboard = []
    for i in range(0, len(genres), columns):
        keyboard.append([InlineKeyboardButton(genre, callback_data=f"genre_{genre}") for genre in genres[i:i+columns]])
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
async def genre_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    genre = query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∞–Ω—Ä –∏–∑ callback_data
    user_data[query.message.chat.id]['genre'] = genre  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä
    authors = get_authors_by_genre(genre)
    await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä '{genre}'. –¢–µ–ø–µ—Ä—å –∫–∞–∫–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä, –Ω–∞–∂–º–∏—Ç–µ /start ", reply_markup=author_keyboard(authors))

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–≤—Ç–æ—Ä–æ–≤
def author_keyboard(authors, columns=2):
    keyboard = []
    for i in range(0, len(authors), columns):
        keyboard.append([InlineKeyboardButton(author, callback_data=f"author_{author}") for author in authors[i:i+columns]])
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ—Ä–∞
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ—Ä–∞
async def author_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    author = query.data.split('_')[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏–∑ callback_data
    chat_id = query.message.chat.id

    if 'genre' in user_data[chat_id]:
        genre = user_data[chat_id]['genre']  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∂–∞–Ω—Ä
    else:
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start.")
        return

    user_data[chat_id]['author'] = author  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞

    books = get_books(genre, author)

    if books:
        books_message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä '{genre}' –∏ –∞–≤—Ç–æ—Ä–∞ '{author}'.\n\n–í–æ—Ç –∫–Ω–∏–≥–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n"
        books_message += "\n".join([f"{title} (–†–µ–π—Ç–∏–Ω–≥: {rating}üåü)" for title, author, genre, rating in books])
        books_message += f"\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –∑–∞–Ω–æ–≤–æ –Ω–∞–∂–º–∏—Ç–µ /start"
        await query.message.reply_text(books_message)
    else:
        await query.message.reply_text("–ö–Ω–∏–≥ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['state'] = 'enter_password'
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    password = update.message.text
    if context.user_data.get('state') == 'enter_password':
        if password == ADMIN_PASSWORD:
            authorized_users.add(chat_id)
            await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        context.user_data['state'] = None
async def addbook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.id in authorized_users:
        context.user_data['state'] = 'adding_book'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
    else:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –í–≤–µ–¥–∏—Ç–µ /admin –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
async def handle_addbook_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id

    if context.user_data.get('state') == 'adding_book':
        if 'book_title' not in context.user_data:
            context.user_data['book_title'] = update.message.text
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:")
            return

        if 'book_author' not in context.user_data:
            context.user_data['book_author'] = update.message.text
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏:")
            return

        if 'book_genre' not in context.user_data:
            context.user_data['book_genre'] = update.message.text
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –∫–Ω–∏–≥–∏ (—á–∏—Å–ª–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É):")
            return

        if 'book_genre' in context.user_data:
            try:
                rating = float(update.message.text)
                title = context.user_data['book_title']
                author = context.user_data['book_author']
                genre = context.user_data['book_genre']

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                add_book_to_db(title, author, genre, rating)
                await update.message.reply_text("–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (—á–∏—Å–ª–æ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É).")

            # –°–±—Ä–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            context.user_data.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
async def deletebook(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.id in authorized_users:
        context.user_data['state'] = 'deleting_book'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ 'deleting_book' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –í–≤–µ–¥–∏—Ç–µ /admin –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
async def handle_deletebook_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('state') == 'deleting_book':
        book_title = update.message.text
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {book_title}")
        delete_book_by_title(book_title)
        await update.message.reply_text(f"–ö–Ω–∏–≥–∞ '{book_title}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        context.user_data.clear()
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print("–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if chat_id in authorized_users:
        authorized_users.remove(chat_id)
        await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_message = ( "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–Ω–∏–≥!üìï\n\n–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n"
                     "/start - –ù–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É –∏ –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –∏ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏.\n" 
                     "/addbook - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É).\n"
                     "/deletebook - –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É).\n"
                     "/admin - –í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
                     "/logout - –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                     "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n"
                     "/books - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.\n"
                )
    await update.message.reply_text(help_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–Ω–∏–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
async def books_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
 # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    books = get_books()
 # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥
    df = pd.DataFrame(books, columns=["–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏", "–ê–≤—Ç–æ—Ä", "–ñ–∞–Ω—Ä", "–†–µ–π—Ç–∏–Ω–≥"])
 # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ Excel —Ñ–∞–π–ª
    file_path = "books.xlsx"
    df.to_excel(file_path, index=False)
 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_document(document=open(file_path, "rb"))
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    if context.user_data.get('state') == 'enter_password':
        await handle_password(update, context)
    elif context.user_data.get('state') == 'adding_book':
        await handle_addbook_text(update, context)
    elif context.user_data.get('state') == 'deleting_book':
        await handle_deletebook_text(update, context)
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token("7903228169:AAEMsCkoTIJhL2HIw3flZGrFGepsbTEytOs").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addbook", addbook))
    application.add_handler(CommandHandler("deletebook", deletebook))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin", admin_auth))
    application.add_handler(CommandHandler("logout", logout))
    application.add_handler(CommandHandler("books", books_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(genre_selection, pattern='^genre_'))
    application.add_handler(CallbackQueryHandler(author_selection, pattern='^author_'))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
